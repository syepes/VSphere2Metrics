buildscript {
  dependencies {
    classpath 'com.github.jengelman.gradle.plugins:shadow:2.+',
              'org.kordamp.gradle:stats-gradle-plugin:0.2.+'
  }
}

plugins {
  id 'groovy'
  id 'distribution'
  id 'com.github.johnrengelman.shadow' version '2.0.3'
  id "org.kordamp.gradle.stats" version "0.2.2"
}

def projectName = 'VSphere2Metrics'
description = "$projectName - ESXi Performance Metric Integration with Graphite & InfluxDB"

group = 'com.allthingsmonitoring.vmware.VSphere2Metrics'
archivesBaseName = projectName.toLowerCase()
distsDirName = 'dist'
version = '1.6.1'

def authorString = 'Sebastian YEPES FERNANDEZ (syepes@gmail.com)'
def copyrightString = 'Copyright &#169; 2017 &#8211; Sebastian YEPES FERNANDEZ All Rights Reserved.'


defaultTasks 'clean','shadowJar','groovydoc','distZip'

configurations {
  groovyDoc
}

configure([compileGroovy, compileTestGroovy]) {
  //groovyOptions.useAnt = true
  //compileGroovy.groovyOptions.fork = true
  groovyOptions.fork(memoryInitialSize: '128M', memoryMaximumSize: '1G')
  groovyOptions.encoding = 'UTF-8'
  //groovyOptions.optimizationOptions.indy = true
  sourceCompatibility = 1.7
  targetCompatibility = 1.7
}

//configurations.compile.transitive = false
compileJava {
  options.encoding = 'UTF-8'
  sourceCompatibility = 1.7
  targetCompatibility = 1.7
}

repositories {
  mavenLocal()
  jcenter()
  mavenCentral()
  maven { url 'https://jitpack.io' }
}

dependencies {
  compile 'org.codehaus.groovy:groovy:2.4.+',
          'org.codehaus.groovy:groovy-json:2.4.+',
          'commons-cli:commons-cli:1.+',
          'org.slf4j:slf4j-api:1.7.+',
          'ch.qos.logback:logback-core:1.2.+',
          'ch.qos.logback:logback-classic:1.2.+',
          'org.fusesource.jansi:jansi:1.+',
          'net.sf.opencsv:opencsv:2.+',
          'com.xlson.groovycsv:groovycsv:1.+',
          'dom4j:dom4j:1.6.+',
          'com.github.syepes:MetricClient:master-SNAPSHOT',
          'com.github.yavijava:yavijava:6.+',
          fileTree(dir: 'libs', include: '*.jar')

  compile 'org.codehaus.jsr166-mirror:jsr166y:1.7.+'
  compile 'org.codehaus.gpars:gpars:1.+', {
            exclude module: "groovy-all"
          }

  groovyDoc 'org.codehaus.groovy:groovy-groovydoc:2.4.+',
            'org.codehaus.groovy:groovy-json:2.4.+',
            'org.codehaus.groovy:groovy-ant:2.4.+'

  testCompile 'org.spockframework:spock-core:1.0-groovy-2.4', {
    exclude module: 'groovy-all'
  }
}


groovydoc {
  classpath -= configurations.groovyDoc
  groovyClasspath = configurations.groovyDoc
  destinationDir  = new File(( System.getProperty( 'groovydocDir' ) ?: project.buildDir.path + '/docs' ), ( project.version.contains( '-SNAPSHOT' ) ? '' : project.version ))
  includePrivate = true

  windowTitle = "$projectName"
  docTitle = "$projectName - v$project.version"
  header = ""
  footer = copyrightString

  link 'http://download.oracle.com/javase/7/docs/api/',                 'java.'
  link 'http://www.groovy-lang.org/api/',                               'groovy.', 'org.codehaus.groovy.'
  link 'http://commons.apache.org/net/apidocs/',                        'org.apache.commons.net.'
}

shadowJar {
  zip64 true
  group = 'shadow'
  classifier = null
  version = null

  exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA'
  exclude 'META-INF/*.txt', 'META-INF/*.properties', '*.htm*', '*.properties'
  exclude 'META-INF/INDEX.LIST', 'META-INF/DEPENDENCIES*', 'META-INF/LICENSE*', 'META-INF/README*','META-INF/NOTICE*', 'META-INF/DISC*'
  exclude 'META-INF/licenses/**', 'META-INF/maven/**'
  mergeServiceFiles()
  mergeGroovyExtensionModules()

  manifest {
    attributes 'Implementation-Title': project.description,
               'Implementation-Version': project.version,
               'Specification-Title': project.description,
               'Specification-Version': project.version,
               'Built-By': System.properties['user.name'],
               'Built-JDK': System.properties['java.version'] +' ('+ System.properties['java.vm.vendor'] +')',
               'Built-Date': new Date(),
               'Author': authorString,
               'Main-Class': project.group
  }
}

distributions {
  main {
    baseName = archivesBaseName
    contents {
      from { 'build/libs' }
      from { 'src/dist' }
      from { 'README.md' }
      from { 'CHANGELOG.md' }
      from { 'LICENSE.md' }
    }
  }
}

distZip.dependsOn('shadowJar')
distTar.dependsOn('shadowJar')
distTar.compression = Compression.GZIP

